/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Peter Nemes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package hu.nemes.projecteuler.page1;

import hu.nemes.projecteuler.common.Arithmetic;
import hu.nemes.projecteuler.common.StreamUtils;

import java.util.concurrent.Callable;

public final class Problem045 implements Callable<Long> {

	/**
	 * Triangular, pentagonal, and hexagonal
	 * Problem 45
	 *
	 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
	 * Triangle 	  	Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
	 * Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
	 * Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...
	 *
	 * It can be verified that T285 = P165 = H143 = 40755.
	 *
	 * Find the next triangle number that is also pentagonal and hexagonal.
	 */
	private final static long min = 40755;

	@Override
	public Long call() {

		return StreamUtils
				.makeTriangleStream()
				.filter(n -> n > min)
				.filter(Arithmetic::isPentagonal)
				.filter(Arithmetic::isHexagonal)
				.findFirst()
				.getAsLong();
	}
}
