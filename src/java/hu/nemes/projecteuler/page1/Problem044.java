/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Peter Nemes
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package hu.nemes.projecteuler.page1;

import hu.nemes.projecteuler.common.Arithmetic;

import java.util.AbstractMap;
import java.util.concurrent.Callable;
import java.util.stream.LongStream;

public final class Problem044 implements Callable<Long> {

	/**
	 * Pentagon numbers
	 * Problem 44
	 * Published on 23 May 2003 at 06:00 pm [Server Time]
	 *
	 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:
	 *
	 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
	 *
	 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.
	 *
	 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
	 */
	@Override
	public Long call() {

		return LongStream
				.iterate(1, n -> n + 1)
				.mapToObj(a -> LongStream
					.range(1, a)
					.map(b -> a - b)
					.mapToObj(b -> new AbstractMap.SimpleImmutableEntry<>((a * ((3 * a) - 1)) / 2, (b * ((3 * b) - 1)) / 2))
					.filter(e -> Arithmetic.isPentagonal(e.getKey() + e.getValue()) &&
								Arithmetic.isPentagonal(e.getKey() - e.getValue()))
					.findFirst()
						)
				.filter(o -> o.isPresent())
				.map(o -> o.get())
				.mapToLong(e -> e.getKey() - e.getValue())
				.findFirst()
				.getAsLong();
	}
}
